{"version":3,"sources":["components/PageTemplate/PageTemplate.tsx","components/TodoInput/TodoInput.tsx","modules/input.ts","modules/todos.ts","containers/TodoInputContainer.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","containers/TodoListContainer.tsx","components/App.tsx","serviceWorker.ts","modules/index.ts","index.tsx"],"names":["cx","classNames","bind","require","PageTemplate","_ref","children","react_default","a","createElement","className","TodoInput","value","onChange","onInsert","type","onKeyPress","e","key","onClick","InputState","_InputRecord","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","Record","actionCreators","setInput","createAction","initialState","handleActions","defineProperty","state","action","set","payload","insert","toggle","remove","TodoItemData","_TodoItemRecord","params","_this","id","autoId","call","objectSpread","text","done","_TodosStateRecord","TodosState","todoItems","List","input","_handleActions","newTodoItem","update","push","updateIn","delete","TodoInputContainer","handleChange","currentTarget","props","InputActions","hanldeInsert","_this$props","TodosActions","components_TodoInput_TodoInput","Component","connect","get","dispatch","bindActionCreators","inputActions","todosActions","TodoItem","onToggle","onRemove","checked","readOnly","stopPropagation","TodoList","nextProps","nextState","todos","todoList","map","todo","index","components_TodoItem_TodoItem","_onRemove","toString","_onToggle","TodoListContainer","handleToggle","hanldeRemove","components_TodoList_TodoList","App","components_PageTemplate_PageTemplate","containers_TodoInputContainer","containers_TodoListContainer","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","modules","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAGMA,EAAKC,IAAWC,KAAKC,EAAQ,KAYpBC,EATwB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACxC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWV,EAAG,kBACjBO,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWV,EAAG,YAAaM,KCRhCN,EAAKC,IAAWC,KAAKC,EAAQ,KA4BpBQ,EArBqB,SAAAN,GAAmC,IAAhCO,EAAgCP,EAAhCO,MAAOC,EAAyBR,EAAzBQ,SAAUC,EAAeT,EAAfS,SAMtD,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAWV,EAAG,eACjBO,EAAAC,EAAAC,cAAA,SACEM,KAAK,OACLF,SAAUA,EACVG,WAViB,SAACC,GACR,UAAVA,EAAEC,KACJJ,KASEF,MAAOA,IAETL,EAAAC,EAAAC,cAAA,OAAKC,UAAWV,EAAG,cAAemB,QAASL,GAA3C,uDCbOM,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAD,EAAA,CAHoBU,YAAO,CACzBlB,MAAO,MAGImB,EAAiB,CAC5BC,SAAUC,YATM,qBAWZC,EAAe,IAAId,EACVe,cAAcb,OAAAc,EAAA,EAAAd,CAAA,GAZX,mBAeD,SAACe,EAAmBC,GAC/B,OAAOD,EAAME,IAAI,QAASD,EAAOE,WAGrCN,WCNWH,EAAiB,CAC5BU,OAAQR,YAdK,gBAebS,OAAQT,YAdK,gBAebU,OAAQV,YAdK,iBA4BFW,EAAb,SAAAC,GAEE,SAAAD,EAAYE,GAA6B,IAAAC,EAAAzB,OAAAC,EAAA,EAAAD,CAAAE,KAAAoB,GACvC,IAAMI,EAAKJ,EAAaK,OADe,OAGrCF,EADED,EACFxB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsB,GAAAM,KAAA1B,KAAAF,OAAA6B,EAAA,EAAA7B,CAAA,GACKwB,EADL,CAEEE,SAGF1B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsB,GAAAM,KAAA1B,KAAM,CAAEwB,QAEVJ,EAAaK,OAASD,EAAK,EAVY1B,OAAAG,EAAA,EAAAH,CAAAyB,GAF3C,OAAAzB,OAAAO,EAAA,EAAAP,CAAAsB,EAAAC,GAAAD,EAAA,CALuBd,YAAO,CAC5BkB,GAAI,EACJI,KAAM,GACNC,MAAM,KAEKT,EACJK,OAAS,EAelB,IAMMf,EAAe,IADrB,SAAAoB,GAAA,SAAAC,IAAA,OAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,GAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAiC,EAAAD,GAAAC,EAAA,CALyBzB,YAAO,CAC9B0B,UAAWC,cACXC,MAAO,OAKMvB,eAAawB,EAAA,GAAArC,OAAAc,EAAA,EAAAd,CAAAqC,EArDb,eAuDD,SAACtB,EAAmBC,GAC5B,IAAMsB,EAAc,IAAIhB,EAAa,CAAEQ,KAAMd,EAAOE,UACpD,OAAOH,EAAMwB,OAAO,YAAa,SAAAL,GAAS,OACxCA,EAAUM,KAAKF,OALKtC,OAAAc,EAAA,EAAAd,CAAAqC,EApDb,eA4DD,SAACtB,EAAmBC,GAAkC,IACtDU,EAAOV,EAAOE,QAAdQ,GACR,OAAOX,EAAM0B,SACX,CAAC,YAAaf,EAAI,QAClB,SAACK,GAAD,OAAoBA,MAZA/B,OAAAc,EAAA,EAAAd,CAAAqC,EAnDb,eAkED,SAACtB,EAAmBC,GAAkC,IACtDU,EAAOV,EAAOE,QAAdQ,GACR,OAAOX,EAAMwB,OAAO,YAAa,SAAAL,GAAS,OAAIA,EAAUQ,OAAOhB,OAjBzCW,GAoB1BzB,GChEI+B,6MACJjB,GAAK,IACLkB,aAAe,SAACjD,GAA+C,IACrDL,EAAUK,EAAEkD,cAAZvD,MACiBmC,EAAKqB,MAAtBC,aACKrC,SAASpB,MAExB0D,aAAe,WAAY,IAAAC,EACqBxB,EAAKqB,MAA3CC,EADiBE,EACjBF,aAAcG,EADGD,EACHC,aAAc5D,EADX2D,EACW3D,MACpC4D,EAAa/B,OAAO7B,GACpByD,EAAarC,SAAS,6EAEf,IACCpB,EAAUY,KAAK4C,MAAfxD,MACAsD,EAA+B1C,KAA/B0C,aAAcI,EAAiB9C,KAAjB8C,aACtB,OACE/D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgE,EAAD,CACE5D,SAAUqD,EACVpD,SAAUwD,EACV1D,MAAOA,YApBgB8D,aA0BlBC,cACb,SAACtC,GAAD,MAAiB,CACfzB,MAAOyB,EAAMqB,MAAMkB,IAAI,WAEzB,SAAAC,GAAQ,MAAK,CACXR,aAAcS,YAAmBC,EAAcF,GAC/CL,aAAcM,YAAmBE,EAAcH,KANpCF,CAQbV,GC5CIjE,EAAKC,IAAWC,KAAKC,EAAQ,KA4BpB8E,mLApBJ,IAAAV,EACwC/C,KAAK4C,MAA5Cf,EADDkB,EACClB,KAAM/C,EADPiE,EACOjE,SAAU4E,EADjBX,EACiBW,SAAUC,EAD3BZ,EAC2BY,SAClC,OACE5E,EAAAC,EAAAC,cAAA,OAAKC,UAAWV,EAAG,aAAcmB,QAAS+D,GACxC3E,EAAAC,EAAAC,cAAA,SAAOC,UAAWV,EAAG,QAASe,KAAK,WAAWqE,QAAS/B,EAAMgC,UAAQ,IACrE9E,EAAAC,EAAAC,cAAA,OAAKC,UAAWV,EAAG,OAAQ,CAAEqD,UAAU/C,GACvCC,EAAAC,EAAAC,cAAA,OACEC,UAAWV,EAAG,UACdmB,QAAS,SAACF,GACRkE,IACAlE,EAAEqE,oBAJN,oBAPeZ,aCsBRa,gMApBSC,EAAkBC,GACtC,OAAOjE,KAAK4C,MAAMsB,QAAUF,EAAUE,uCAG/B,IAAAnB,EAC+B/C,KAAK4C,MAAnCsB,EADDnB,EACCmB,MAAOR,EADRX,EACQW,SAAUC,EADlBZ,EACkBY,SACnBQ,EAAWD,EAAME,IAAI,SAACC,EAAMC,GAAP,OACzBvF,EAAAC,EAAAC,cAACsF,EAAD,CACE7E,IAAK2E,EAAKjB,IAAI,MACdvB,KAAMwC,EAAKjB,IAAI,QACfO,SAAQ,SAAAa,GAAA,SAAAb,IAAA,OAAAa,EAAArE,MAAAH,KAAAI,WAAA,OAAAuD,EAAAc,SAAA,kBAAAD,EAAAC,YAAAd,EAAA,CAAE,kBAAMA,EAASW,KACzBZ,SAAQ,SAAAgB,GAAA,SAAAhB,IAAA,OAAAgB,EAAAvE,MAAAH,KAAAI,WAAA,OAAAsD,EAAAe,SAAA,kBAAAC,EAAAD,YAAAf,EAAA,CAAE,kBAAMA,EAASY,MAExBD,EAAKzC,QAGV,OAAO7C,EAAAC,EAAAC,cAAA,WAAMkF,UAjBMjB,aCCjByB,6MACJC,aAAe,SAACpD,GACWD,EAAKqB,MAAtBI,aACK9B,OAAO,CAAEM,UAExBqD,aAAe,SAACrD,GACWD,EAAKqB,MAAtBI,aACK7B,OAAO,CAAEK,gFAGf,IACC0C,EAAUlE,KAAK4C,MAAfsB,MACAU,EAA+B5E,KAA/B4E,aAAcC,EAAiB7E,KAAjB6E,aACtB,OACE9F,EAAAC,EAAAC,cAAC6F,EAAD,CAAUZ,MAAOA,EAAOR,SAAUkB,EAAcjB,SAAUkB,WAdhC3B,aAkBjBC,cACb,SAACtC,GAAD,MAAiB,CACfqD,MAAOrD,EAAMqD,MAAMlC,YAErB,SAAAqB,GAAQ,MAAK,CACXL,aAAcM,YAAmBE,EAAcH,KALpCF,CAObwB,GC9BmBI,mLAEjB,OACEhG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+F,EAAD,KACEjG,EAAAC,EAAAC,cAACgG,EAAD,MACAlG,EAAAC,EAAAC,cAACiG,EAAD,eANuBhC,aCMbiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdN,IAIeC,EAJKC,YAAgB,CAClCvD,QACAgC,UCIIwB,EAAQC,YACZC,EACCR,OAAeS,8BACbT,OAAeS,gCAEpBC,IAASC,OACPhH,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CAAUN,MAAOA,GACf3G,EAAAC,EAAAC,cAACgH,EAAD,OAEFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3d6d45c2.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames/bind\";\n\nconst cx = classNames.bind(require(\"./PageTemplate.sass\"));\n\ninterface Props {}\nconst PageTemplate: React.SFC<Props> = ({ children }) => {\n  return (\n    <div className={cx(\"page-template\")}>\n      <h1>Todo List</h1>\n      <div className={cx(\"content\")}>{children}</div>\n    </div>\n  );\n};\n\nexport default PageTemplate;\n","import React from \"react\";\nimport classNames from \"classnames/bind\";\nconst cx = classNames.bind(require(\"./TodoInput.sass\"));\ninterface Props {\n  value: string;\n  onChange(e: React.FormEvent<HTMLInputElement>): void;\n  onInsert(): void;\n}\n\nconst TodoInput: React.SFC<Props> = ({ value, onChange, onInsert }) => {\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      onInsert();\n    }\n  };\n  return (\n    <div className={cx(\"todo-input\")}>\n      <input\n        type=\"text\"\n        onChange={onChange}\n        onKeyPress={handleKeyPress}\n        value={value}\n      />\n      <div className={cx(\"add-button\")} onClick={onInsert}>\n        ADD\n      </div>\n    </div>\n  );\n};\n\nexport default TodoInput;\n","import { Record } from \"immutable\";\nimport { handleActions, createAction, Action } from \"redux-actions\";\n\nconst SET_INPUT = \"inputs/SET_INPUT\";\n\ntype CreatePayload = string;\n\nconst InputRecord = Record({\n  value: \"\"\n});\nexport class InputState extends InputRecord {}\nexport const actionCreators = {\n  setInput: createAction<CreatePayload>(SET_INPUT)\n};\nconst initialState = new InputState();\nexport default handleActions(\n  {\n    //TODO\n    [SET_INPUT]: (state: InputState, action: Action<CreatePayload>) => {\n      return state.set(\"value\", action.payload);\n    }\n  },\n  initialState\n);\n","import { List, Record } from \"immutable\";\nimport { createAction, handleActions, Action } from \"redux-actions\";\n\nconst INSERT = \"todos/INSERT\";\nconst TOGGLE = \"todos/TOGGLE\";\nconst REMOVE = \"todos/REMOVE\";\n\ntype InsertPayload = string;\ntype TogglePayload = {\n  id: number;\n};\ntype RemovePayload = {\n  id: number;\n};\n\ntype Payload = InsertPayload & TogglePayload & RemovePayload;\nexport const actionCreators = {\n  insert: createAction<InsertPayload>(INSERT),\n  toggle: createAction<TogglePayload>(TOGGLE),\n  remove: createAction<RemovePayload>(REMOVE)\n};\n\ninterface TodoItemDataParams {\n  id?: number;\n  text?: string;\n  done?: boolean;\n}\n\nconst TodoItemRecord = Record({\n  id: 0,\n  text: \"\",\n  done: false\n});\nexport class TodoItemData extends TodoItemRecord {\n  static autoId = 0;\n  constructor(params?: TodoItemDataParams) {\n    const id = TodoItemData.autoId;\n    if (params) {\n      super({\n        ...params,\n        id\n      });\n    } else {\n      super({ id });\n    }\n    TodoItemData.autoId = id + 1;\n  }\n}\n\nconst TodosStateRecord = Record({\n  todoItems: List(),\n  input: \"\"\n});\n\nexport class TodosState extends TodosStateRecord {}\nconst initialState = new TodosState();\nexport default handleActions<TodosState, Payload>(\n  {\n    [INSERT]: (state: TodosState, action: Action<InsertPayload>) => {\n      const newTodoItem = new TodoItemData({ text: action.payload });\n      return state.update(\"todoItems\", todoItems =>\n        todoItems.push(newTodoItem)\n      );\n    },\n    [TOGGLE]: (state: TodosState, action: Action<TogglePayload>) => {\n      const { id } = action.payload;\n      return state.updateIn(\n        [\"todoItems\", id, \"done\"],\n        (done: boolean) => !done\n      );\n    },\n    [REMOVE]: (state: TodosState, action: Action<RemovePayload>) => {\n      const { id } = action.payload;\n      return state.update(\"todoItems\", todoItems => todoItems.delete(id));\n    }\n  },\n  initialState\n);\n","import React, { Component } from \"react\";\nimport TodoInput from \"../components/TodoInput/TodoInput\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { actionCreators as inputActions } from \"modules/input\";\nimport { actionCreators as todosActions } from \"modules/todos\";\ninterface Props {\n  value: string;\n  TodosActions: typeof todosActions;\n  InputActions: typeof inputActions;\n}\nclass TodoInputContainer extends Component<Props> {\n  id = 1;\n  handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    const { value } = e.currentTarget;\n    const { InputActions } = this.props;\n    InputActions.setInput(value);\n  };\n  hanldeInsert = (): void => {\n    const { InputActions, TodosActions, value } = this.props;\n    TodosActions.insert(value);\n    InputActions.setInput(\"\");\n  };\n  render() {\n    const { value } = this.props;\n    const { handleChange, hanldeInsert } = this;\n    return (\n      <div>\n        <TodoInput\n          onChange={handleChange}\n          onInsert={hanldeInsert}\n          value={value}\n        />\n      </div>\n    );\n  }\n}\nexport default connect(\n  (state: any) => ({\n    value: state.input.get(\"value\")\n  }),\n  dispatch => ({\n    InputActions: bindActionCreators(inputActions, dispatch),\n    TodosActions: bindActionCreators(todosActions, dispatch)\n  })\n)(TodoInputContainer);\n","import React, { Component } from \"react\";\nimport classNames from \"classnames/bind\";\nconst cx = classNames.bind(require(\"./TodoItem.sass\"));\ninterface Props {\n  done: boolean;\n  onToggle(): void;\n  onRemove(): void;\n}\ninterface State {}\nclass TodoItem extends Component<Props, State> {\n  render() {\n    const { done, children, onToggle, onRemove } = this.props;\n    return (\n      <div className={cx(\"todo-item\")} onClick={onToggle}>\n        <input className={cx(\"tick\")} type=\"checkbox\" checked={done} readOnly />\n        <div className={cx(\"text\", { done })}>{children}</div>\n        <div\n          className={cx(\"delete\")}\n          onClick={(e: React.MouseEvent<HTMLDivElement>): void => {\n            onRemove();\n            e.stopPropagation();\n          }}\n        >\n          [REMOVE]\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport TodoItem from \"../TodoItem/TodoItem\";\nimport { TodoItemData } from \"modules/todos\";\nimport { List } from \"immutable\";\ninterface Props {\n  todos: List<TodoItemData>;\n  onToggle(id: number): void;\n  onRemove(id: number): void;\n}\ninterface State {}\nclass TodoList extends Component<Props> {\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return this.props.todos !== nextProps.todos;\n  }\n\n  render() {\n    const { todos, onToggle, onRemove } = this.props;\n    const todoList = todos.map((todo, index) => (\n      <TodoItem\n        key={todo.get(\"id\")}\n        done={todo.get(\"done\")}\n        onRemove={() => onRemove(index)}\n        onToggle={() => onToggle(index)}\n      >\n        {todo.text}\n      </TodoItem>\n    ));\n    return <div>{todoList}</div>;\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { List } from \"immutable\";\nimport { actionCreators as todosActions, TodoItemData } from \"modules/todos\";\nimport { connect } from \"react-redux\";\nimport TodoList from \"components/TodoList/TodoList\";\n\ninterface Props {\n  todos: List<TodoItemData>;\n  TodosActions: typeof todosActions;\n}\nclass TodoListContainer extends Component<Props> {\n  handleToggle = (id: number) => {\n    const { TodosActions } = this.props;\n    TodosActions.toggle({ id });\n  };\n  hanldeRemove = (id: number) => {\n    const { TodosActions } = this.props;\n    TodosActions.remove({ id });\n  };\n\n  render() {\n    const { todos } = this.props;\n    const { handleToggle, hanldeRemove } = this;\n    return (\n      <TodoList todos={todos} onToggle={handleToggle} onRemove={hanldeRemove} />\n    );\n  }\n}\nexport default connect(\n  (state: any) => ({\n    todos: state.todos.todoItems\n  }),\n  dispatch => ({\n    TodosActions: bindActionCreators(todosActions, dispatch)\n  })\n)(TodoListContainer);\n","import React, { Component } from \"react\";\nimport PageTemplate from \"./PageTemplate/PageTemplate\";\nimport TodoInputContainer from \"containers/TodoInputContainer\";\nimport TodoListContainer from \"containers/TodoListContainer\";\ninterface Props {}\n\nexport default class App extends Component<Props> {\n  render() {\n    return (\n      <div>\n        <PageTemplate>\n          <TodoInputContainer />\n          <TodoListContainer />\n        </PageTemplate>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import input from \"./input\";\nimport todos from \"./todos\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  input,\n  todos\n});\nexport default rootReducer;\nexport type AppState = ReturnType<typeof rootReducer>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/main.sass\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport modules from \"./modules\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(\n  modules,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}